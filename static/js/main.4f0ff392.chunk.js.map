{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","SearchBar","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","key","onClick","handleSortByChange","renderSortByOptions","onChange","placeholder","App","console","log","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4f0ff392.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component{\r\n    render() {\r\n        return (\r\n        <div className=\"Business\">\r\n          <div className=\"image-container\">\r\n            <img src={this.props.business.imageSrc} alt=''/>\r\n          </div>\r\n          <h2>{this.props.business.name}</h2>\r\n          <div className=\"Business-information\">\r\n            <div className=\"Business-address\">\r\n              <p>{this.props.business.address}</p>\r\n              <p>{this.props.business.city}</p>\r\n              <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n            </div>\r\n            <div className=\"Business-reviews\">\r\n              <h3>{this.props.business.category}</h3>\r\n              <h3 className=\"rating\">{this.props.business.rating} stars</h3>\r\n              <p>{this.props.business.reviewCount} reviews</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component{\r\n    render() {\r\n        return (\r\n        <div className=\"BusinessList\">\r\n            {\r\n                this.props.businesses.map( \r\n                (business) => { return <Business business={business} /> } \r\n                )\r\n            }\r\n        </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n\r\nclass SearchBar extends React.Component{\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            term : '',\r\n            location : '',\r\n            sortBy : 'best_match'\r\n        }\r\n\r\n        this.sortByOptions = {\r\n            'Best Match' : 'best_match',\r\n            'Highest Rated' : 'rating',\r\n            'Most Reviewed' : 'review_count'\r\n        };\r\n\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n    }\r\n\r\n    getSortByClass(sortByOption) {\r\n        if (this.state.sortBy === sortByOption ) {\r\n            return 'active' ;\r\n        } else {\r\n            return '' ;\r\n        }\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n        this.setState( { sortBy : sortByOption } )\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({\r\n            term : event.target.value\r\n        })    \r\n    }\r\n\r\n    handleLocationChange(event) {\r\n        this.setState({\r\n            location : event.target.value\r\n        });\r\n    }\r\n\r\n    handleSearch(event) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        event.preventDefault();\r\n    }\r\n    \r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => \r\n            {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return (\r\n                <li \r\n                    className={this.getSortByClass(sortByOptionValue)} \r\n                    key={sortByOptionValue} \r\n                    onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\r\n                > \r\n                    {sortByOption} \r\n                </li> \r\n                )\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\r\n                    <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <a onClick={this.handleSearch} > Let's Go</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nconst business = {\n  imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n  name: 'MarginOtto Pizzeria',\n  address: '1010 Paddington Way',\n  city: 'Flavortown',\n  state: 'NY',\n  zipCode: '10101',\n  category: 'Italian',\n  rating: 4.5,\n  reviewCount: 90\n};\n\nconst businesses = [business, business, business, business, business, business];\n\nclass App extends React.Component {\n  searchYelp(term, location, sortBy) {\n    console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}`);\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}