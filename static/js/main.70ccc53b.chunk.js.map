{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","className","placeholder","React","Component","Track","props","addTrack","bind","removeTrack","this","onAdd","track","onRemove","isRemoval","onClick","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","event","onNameChange","target","value","onChange","defaultValue","App","updatePlaylistName","state","playlistName","playlistTracks","setState","trackToBeRemoved","filteredArray","filter","newName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70ccc53b.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css'\n\nexport class SearchBar extends React.Component{\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song, Album, or Artist\" />\n        <button className=\"SearchButton\">SEARCH</button>\n      </div>      \n    )\n  }\n};","import React from 'react';\nimport './Track.css';\n\nexport class Track extends React.Component{\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track)\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track)\n  }\n  \n  renderAction(){\n    if (this.props.isRemoval) {\n      return (\n        <button onClick={this.removeTrack} className='Track-action'>-</button>\n      )\n    } else {\n      return (\n        <button onClick={this.addTrack} className='Track-action'>+</button>\n      )\n    } \n  }\n  \n  render() {\n    return(\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    )\n  }\n}\n\n","import React from 'react';\nimport {Track} from '../Track/Track';\nimport './TrackList.css';\n\nexport class TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map( track => {\n            return <Track \n              onAdd={this.props.onAdd}\n              onRemove={this.props.onRemove} \n              track={track} \n              key={track.id}\n              isRemoval={this.props.isRemoval} />\n          })\n        } \n      </div>\n    )\n  }\n}\n\n","import React from 'react';\nimport {TrackList} from '../TrackList/TrackList'\nimport './SearchResults.css';\n\nexport class SearchResults extends React.Component {\n  render() { \n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n         <TrackList \n          isRemoval={false} \n          tracks={this.props.searchResults} \n          onAdd={this.props.onAdd} />\n      </div>\n    )\n  }\n}\n\n","import React from 'react';\nimport {TrackList} from '../TrackList/TrackList';\nimport './Playlist.css';\n\nexport class Playlist extends React.Component{\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n  \n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value)\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleNameChange} defaultValue={this.props.name}/>\n        <TrackList isRemoval={true} tracks={this.props.tracks} onRemove={this.props.onRemove} />\n        <button className=\"Playlist-save\">SAVE TO SPOTIFY</button>\n      </div>\n    )\n  }\n}\n\n","import React from 'react';\nimport {SearchBar} from '../SearchBar/SearchBar';\nimport {SearchResults} from '../SearchResults/SearchResults';\nimport {Playlist} from '../Playlist/Playlist';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.state = {\n      searchResults: [\n        {\n          name: 'track1',\n          artist: 'artist1', \n          album: 'album1',\n          id: 1\n        }, \n          \n        {\n          name: 'track2',\n          artist: 'artist2', \n          album: 'album2',\n          id: 2\n        },\n\n        {\n          name: 'track3',\n          artist: 'artist3', \n          album: 'album3',\n          id: 3\n        }\n      ],\n\n      playlistName: 'Chill Beats',\n\n      playlistTracks: [\n        {\n          name: '$ave Dat Money',\n          artist: 'Lil Dicky', \n          album: '$ave Dat Money',\n          id: 4\n        }         \n      ]\n    };\n  }\n\n  //Using ES6 array concatenation we can add a new track to the playlistTracks array. Very clean! \n  addTrack(track) {\n    this.setState(\n       {playlistTracks: [...this.state.playlistTracks, track] } \n    )\n  }\n\n  //When called, removes trackToBeRemoved from playlistTracks by filtering for all tracks which don't match trackToBeRemoved's id.\n  removeTrack(trackToBeRemoved) {\n    const filteredArray = this.state.playlistTracks.filter( track => {\n      return track.id !== trackToBeRemoved.id;\n    })\n    this.setState(\n       {playlistTracks: filteredArray } \n    )\n  }\n\n  updatePlaylistName(newName) {\n    this.setState({playlistName: newName})\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar />\n          <div className=\"App-playlist\">\n            <SearchResults \n              searchResults={this.state.searchResults} \n              onAdd={this.addTrack} \n            />\n            \n            <Playlist \n              name={this.state.playlistName} \n              tracks={this.state.playlistTracks} \n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName} \n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}